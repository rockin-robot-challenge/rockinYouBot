#!/usr/bin/env python
import sys
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
import std_msgs.msg
import numpy
import tf
import actionlib



'''
Usage:
Publish on the topics 'event_in' message string 'e_start' to 
start relative motion at pregrasp arm configuration.
This component will compute downward movement of the arm in the pregrasp state
Limitation of the component:
It works only if the arm is leaned in front or on the back side of the youbot
'''
event_in = ['e_start']
event_out = ['e_success','e_failure']

class ArmRelativeMotionControl:
	
	def __init__(self):
		
		self.init_moveit()
		self.init_param()
		
		rospy.Subscriber("~event_in",std_msgs.msg.String,self.event_in_cb)
		self.pub = rospy.Publisher("~event_out",std_msgs.msg.String)
		
					
	def init_param(self):
		self.relative_distance = 0.00
		self.tooltip_armlink5_distance = 0.166
		self.planning_fraction_tolerance = 0.2
		self.platformsurface_to_tooltip_tolerance = 0.02
		self.platformsurface_wrt_baselink = 0.007
		
	def init_moveit(self):
		'''
		Instantiate a RobotCommander object
		Instantiate a PlanningSceneInterface object
		Instantiate a MoveGroupCommander object
		create this DisplayTrajectory publisher which is used below 
			to publish trajectories for RVIZ to visualize.
		'''
		
		# temporary fix to wait for moveit to come up, otherwise MoveGroupCommander will fail after a timeout
		client = actionlib.SimpleActionClient('/move_group', moveit_msgs.msg.MoveGroupAction)
		rospy.loginfo("Wait for MoveIt! to come up ...", )
		client.wait_for_server()
		rospy.loginfo("... MoveIt! is up")
		
		self.group = moveit_commander.MoveGroupCommander('arm_1')
       
		self.display_trajectory_publisher = rospy.Publisher('/move_group/display_planned_path',moveit_msgs.msg.DisplayTrajectory)

		self.group.set_pose_reference_frame('/base_link')
		self.group.set_goal_position_tolerance(0.0003)
		self.group.set_goal_orientation_tolerance(0.1)
		self.group.set_goal_joint_tolerance(0.003)
		
		self.moveit_debug_messages()
		
	def event_in_cb(self,msg):
		if (msg.data == event_in[0]):
			self.pregrasp_relative_motion_cb()
			
	def event_out_publish(self,data):
		self.pub.publish(data)
					
	def pregrasp_relative_motion_cb(self):		
		'''
		Gets current end-effector pose.
		Extracts z-component from the pose to estimate distance from the platform surface
		Computes desired wrist(arm_link_5) pose.
		Plan and execute desired relative motion using current and desired wrist pose. 
		'''
		self.group.set_end_effector_link('gripper_tip_link')
		
		tool_tip_wrt_base = geometry_msgs.msg.Pose()
		tool_tip_wrt_base = self.group.get_current_pose().pose
		
		if (tool_tip_wrt_base.position.z > self.platformsurface_to_tooltip_tolerance):
			
			self.relative_distance = (tool_tip_wrt_base.position.z - self.platformsurface_wrt_baselink) 
			self.group.set_end_effector_link('arm_link_5')
			
			desired_wrist_wrt_base = self.compute_desired_wrist_pose(tool_tip_wrt_base)
			self.plan_execute_relative_motion(self.group.get_current_pose().pose,desired_wrist_wrt_base.pose)
		else:
			self.relative_distance = 0.0			
							
	def plan_execute_relative_motion(self,current_pose,goal_pose):
		'''
		Creates a list from start and goal poses
		Calls moveit compute cartesian path method to plan cartesian motions
		 		Passed Arguments: waypoints of trajectory 
		 		Returned Result:
		 		plan and fraction(percentage of total trajectory is planned)
		 Sending last joint configuration from cartesian plan to moveit to plan in joint space
		'''				
		waypoints = []
		waypoints.append(current_pose)
		waypoints.append(goal_pose)
		
		(plan, fraction) = self.group.compute_cartesian_path(waypoints,0.01, 0.0)
		planned_trajectory_length = len(plan.joint_trajectory.points)
		
		rospy.loginfo("Moveit Cartesian path planner output")
		rospy.loginfo("Planning Fraction result: %f",fraction)
		rospy.loginfo("Length of the planned trajectory: %d",planned_trajectory_length)
		
		if(fraction > self.planning_fraction_tolerance):
			joint_values = list(plan.joint_trajectory.points[planned_trajectory_length-1].positions)
			self.move_arm_joint_space(joint_values)
			self.event_out_publish("e_success")
		else:
			self.event_out_publish("e_failure")
			
	def compute_desired_wrist_pose(self,current_tooltip_pose):
		'''
		It computes the desired wrist pose because moveit 
		is using arm_link_5 as end effector reference frame.
		desired_tip_relative_motion: Desired relative motion
		tip_wrt_wrist: Projecting the tool tip to wrist
		'''
		quat = [current_tooltip_pose.orientation.x,current_tooltip_pose.orientation.y,
				current_tooltip_pose.orientation.z,current_tooltip_pose.orientation.w]
		pose = [[current_tooltip_pose.position.x],[current_tooltip_pose.position.y],[current_tooltip_pose.position.z]]
		
		tool_tip_wrt_base = tf.transformations.quaternion_matrix(quat)
		tool_tip_wrt_base[0:3,3:4] = numpy.matrix(pose)
		
		desired_tip_relative_motion = numpy.matrix([
							[1.0, 0.0, 0.0, -0.03],
							[0.0, 1.0, 0.0, 0.0],
							[0.0, 0.0, 1.0,self.relative_distance],
							[0.0, 0.0, 0.0, 1.0]])
		
		tip_wrt_wrist = numpy.matrix([
			[1.0,  0.0, 0.0, 0.0],
			[0.0, 1.0, 0.0 , 0.0],
			[0.0,  0.0,  1.0, -self.tooltip_armlink5_distance],
			[0.0,  0.0,  0.0, 1.0]])
		
		wrist_wrt_base = tool_tip_wrt_base * tip_wrt_wrist * desired_tip_relative_motion 
		desired_wrist_wrt_base = self.matrix_to_pose('base_link', wrist_wrt_base )
		return desired_wrist_wrt_base
		
	def move_arm_joint_space(self,target_joint_angles):
		
		self.group.clear_pose_targets()
		self.group.set_joint_value_target(target_joint_angles)
		try:
			plan = self.group.plan()
			self.group.execute(plan) 
		except rospy.ROSInterruptException:
			rospy.loginfo("Planning in joint space failed.")
		
	def matrix_to_pose(self,frame, matrix):
		'''
		:param frame: Name of the reference frame in which the pose is
		specified.
		:type frame: String

		:param matrix: The 4x4 transformation matrix.
		:type matrix: numpy.matrix

		:return: The pose interpretable by ROS.
		:rtype: geometry_msgs.msg.PoseStamepd
		'''
		pose = geometry_msgs.msg.PoseStamped()

		pose.header.frame_id = frame
		pose.header.stamp = rospy.Time.now()

		pose.pose.position.x = matrix[0, 3]
		pose.pose.position.y = matrix[1, 3]
		pose.pose.position.z = matrix[2, 3]

		quat = tf.transformations.quaternion_from_matrix(matrix)
		pose.pose.orientation.x = quat[0]
		pose.pose.orientation.y = quat[1]
		pose.pose.orientation.z = quat[2]
		pose.pose.orientation.w = quat[3]

		return pose
		
	def moveit_debug_messages(self):
		
		rospy.loginfo("Planning reference frame : %s" , self.group.get_planning_frame())
		rospy.loginfo("Pose reference frame : %s" ,self.group.get_pose_reference_frame())
		rospy.loginfo("End effector reference frame : %s" ,self.group.get_end_effector_link())

if __name__=='__main__':
	
	rospy.init_node('arm_relative_motion_controller')
	
	try:
		ArmRelativeMotionControl()
		while not rospy.is_shutdown():
			rospy.sleep(0.5)
	except rospy.ROSInterruptException: 
		pass
	
	
	
